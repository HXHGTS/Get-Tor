name: Get Tor

on:
  push:
    branches:
    - main
  schedule:
  - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  get-tor:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Necessary Tools
      run: |
        sudo apt install -y wget curl tar coreutils

    - name: Download Tor Expert Bundle
      run: |
        BUNDLE_URL=$(curl -sSL https://www.torproject.org/download/tor/ | grep 'linux-x86_64' | tail -n 1 | awk -F\" '{print $4}')
        GEOIP4_URL='https://gitlab.torproject.org/tpo/core/tor/-/raw/main/src/config/geoip?ref_type=heads&inline=false'
        GEOIP6_URL='https://gitlab.torproject.org/tpo/core/tor/-/raw/main/src/config/geoip6?ref_type=heads&inline=false'
        FILE_NAME=$(basename $BUNDLE_URL)
        wget -O $FILE_NAME "$BUNDLE_URL"
        wget -O geoip "$GEOIP4_URL"
        wget -O geoip6 "$GEOIP6_URL"
        tar -zxvf $FILE_NAME -C .

    - name: Get Bundle Files
      run: |
        sudo mkdir -p ./gettor
        sudo mv -f ./tor/{libcrypto.so.3,libevent-2.1.so.7,libssl.so.3,libstdc++.so.6,tor} ./gettor/
        sudo mv -f ./tor/pluggable_transports/{lyrebird,conjure-client,snowflake-client} ./gettor/
        sudo mv -f ./geoip ./geoip6 ./gettor/
        sudo chown -R 777 ./gettor
        sudo chown -R $USER:$USER ./gettor
        git config --global user.email "${{ secrets.GH_EMAIL }}"
        git config --global user.name "github-actions[bot]"
        sudo git add ./gettor/*


    - name: Create tag
      id: create_tag
      run: |
        TAG_NAME=$(date -u +"%Y%m%d%H%M%S")
        if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
          echo "Tag $TAG_NAME already exists, deleting it from remote."
          git push --delete origin "$TAG_NAME"
          while git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; do
            echo "Waiting for tag $TAG_NAME to be deleted..."
            sleep 5
          done
        fi
        git tag $TAG_NAME
        git push --force origin $TAG_NAME
        echo "::set-output name=TAG_NAME::$TAG_NAME"

    - name: Create release
      id: create_release
      run: |
        TAG_NAME=${{ steps.create_tag.outputs.TAG_NAME }}
        RELEASE_ID=$(gh release view "$TAG_NAME" --json id --jq '.id' || echo "null")
        if [ "$RELEASE_ID" != "null" ]; then
          echo "Release $TAG_NAME already exists, deleting it."
          gh release delete "$TAG_NAME" --yes
        fi
        gh release create "$TAG_NAME" --title "$TAG_NAME" --notes "Auto-generated release for $TAG_NAME" ./gettor/*
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
